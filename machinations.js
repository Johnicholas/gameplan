// Generated by CoffeeScript 1.6.1
var Arrow, Diagram, Gate, Modifier, Pool, Trigger, assert, t, tests, _i, _len,
  __slice = [].slice;

Array.prototype.setRemove = function(obj) {
  var i;
  i = this.indexOf(obj);
  if (i >= 0) {
    this[i] = this[this.length - 1];
    this.length--;
  }
  return i;
};

Diagram = (function() {

  function Diagram() {
    this.stuff = [];
  }

  Diagram.prototype.add = function(thing) {
    this.stuff.push(thing);
    return thing;
  };

  Diagram.prototype.remove = function(thing) {
    this.stuff.setRemove(thing);
    return typeof thing.remove === "function" ? thing.remove() : void 0;
  };

  Diagram.prototype.state = function() {
    var s, state, t, _i, _len, _ref;
    state = [];
    _ref = this.stuff;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if ((s = typeof t.state === "function" ? t.state() : void 0) != null) {
        state.push([t, s]);
      }
    }
    return state;
  };

  Diagram.prototype.restore = function(state) {
    var s, t, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.stuff;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if (typeof t.reset === "function") {
        t.reset();
      }
    }
    for (_j = 0, _len1 = state.length; _j < _len1; _j++) {
      _ref1 = state[_j], t = _ref1[0], s = _ref1[1];
      t.restore(s);
    }
  };

  return Diagram;

})();

Pool = (function() {

  function Pool(tokens) {
    this.tokens = tokens != null ? tokens : 0;
    this.out_arrows = [];
    this.in_arrows = [];
    this.mode = 'pull-any';
  }

  Pool.prototype.take = function(n) {
    n = Math.min(n, this.tokens);
    this.tokens -= n;
    if (n > 0) {
      this.emit('out', n);
    }
    return n;
  };

  Pool.prototype.give = function(n) {
    this.tokens += n;
    if (n > 0) {
      return this.emit('in', n);
    }
  };

  Pool.prototype.pullAll = function() {
    var a, num, _i, _j, _len, _len1, _ref, _ref1;
    _ref = this.in_arrows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      if (!a.canPull()) {
        return;
      }
    }
    num = 0;
    _ref1 = this.in_arrows;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      a = _ref1[_j];
      num += a.pull();
    }
    return this.give(num);
  };

  Pool.prototype.pullAny = function() {
    var a, num, _i, _len, _ref;
    num = 0;
    _ref = this.in_arrows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      num += Math.min(1, a.pullAny());
    }
    return this.give(num);
  };

  Pool.prototype.push = function() {
    var a, n, _i, _len, _ref;
    _ref = this.out_arrows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      n = this.take(a.label);
      if (n > 0) {
        a.push(n);
      }
    }
  };

  Pool.prototype.activate = function() {
    switch (this.mode) {
      case 'pull-any':
        return this.pullAny();
      case 'pull-all':
        return this.pullAll();
      case 'push':
        return this.push();
    }
  };

  Pool.prototype.on = function(ev, listener) {
    var _base, _ref, _ref1;
    return ((_ref = (_base = ((_ref1 = this.listeners) != null ? _ref1 : this.listeners = {}))[ev]) != null ? _ref : _base[ev] = []).push(listener);
  };

  Pool.prototype.removeListener = function(ev, listener) {
    var _base, _ref, _ref1;
    return ((_ref = (_base = ((_ref1 = this.listeners) != null ? _ref1 : this.listeners = {}))[ev]) != null ? _ref : _base[ev] = []).setRemove(listener);
  };

  Pool.prototype.emit = function() {
    var args, ev, l, _base, _i, _len, _ref, _ref1, _ref2, _results;
    ev = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref2 = ((_ref = (_base = ((_ref1 = this.listeners) != null ? _ref1 : this.listeners = {}))[ev]) != null ? _ref : _base[ev] = []);
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      l = _ref2[_i];
      _results.push(l.apply(void 0, args));
    }
    return _results;
  };

  Pool.prototype.state = function() {
    return this.tokens;
  };

  Pool.prototype.restore = function(s) {
    return this.tokens = s;
  };

  return Pool;

})();

Arrow = (function() {

  function Arrow(src, dst) {
    this.setSrc(src);
    this.setDst(dst);
    this.label = 1;
  }

  Arrow.prototype.setSrc = function(src) {
    var _ref, _ref1;
    if ((_ref = this.src) != null) {
      _ref.out_arrows.setRemove(this);
    }
    this.src = src;
    return (_ref1 = this.src) != null ? _ref1.out_arrows.push(this) : void 0;
  };

  Arrow.prototype.setDst = function(dst) {
    var _ref, _ref1;
    if ((_ref = this.dst) != null) {
      _ref.in_arrows.setRemove(this);
    }
    this.dst = dst;
    return (_ref1 = this.dst) != null ? _ref1.in_arrows.push(this) : void 0;
  };

  Arrow.prototype.remove = function() {
    this.setSrc(null);
    return this.setDst(null);
  };

  Arrow.prototype.canPull = function() {
    return this.src && (this.src.take != null) && this.src.tokens >= this.label;
  };

  Arrow.prototype.pullAny = function() {
    if (this.src && (this.src.take != null)) {
      return this.src.take(this.label);
    } else {
      return 0;
    }
  };

  Arrow.prototype.pull = function() {
    if (this.src && (this.src.take != null) && this.src.tokens >= this.label) {
      return this.src.take(this.label);
    }
    return 0;
  };

  Arrow.prototype.push = function(n) {
    if (!this.dst) {
      return n;
    }
    return this.dst.give(n);
  };

  Arrow.prototype.state = function() {
    return this.label;
  };

  Arrow.prototype.restore = function(s) {
    return this.label = s;
  };

  return Arrow;

})();

Trigger = (function() {

  function Trigger(src, dst) {
    var _this = this;
    this.src = src;
    this.dst = dst;
    this.src.on('in', this.listener = function() {
      return _this.dst.activate();
    });
  }

  Trigger.prototype.remove = function() {
    return this.src.removeListener('in', this.listener);
  };

  return Trigger;

})();

Modifier = (function() {

  function Modifier(src, dst, modifier) {
    var _this = this;
    this.src = src;
    this.dst = dst;
    this.modifier = modifier;
    this.src.on('in', this.in_listener = function() {
      return _this.dst.label += _this.modifier;
    });
    this.src.on('out', this.out_listener = function() {
      return _this.dst.label -= _this.modifier;
    });
  }

  Modifier.prototype.remove = function() {
    this.src.removeListener('in', this.in_listener);
    return this.src.removeListener('out', this.out_listener);
  };

  return Modifier;

})();

Gate = (function() {

  function Gate() {
    this.out_arrows = [];
    this.in_arrows = [];
    this.mode = 'random';
    this.count = 0;
  }

  Gate.prototype.give = function(n) {
    var a, _i;
    for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
      a = this.pick();
      a.push(1);
    }
  };

  Gate.prototype.pick = function() {
    var a, r, running_total, total, _i, _j, _len, _len1, _ref, _ref1;
    total = 0;
    _ref = this.out_arrows;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      total += a.label;
    }
    if (this.mode === 'random') {
      r = Math.random() * total;
    } else if (this.mode === 'deal') {
      r = this.count;
      this.count = (this.count + 1) % total;
    }
    running_total = 0;
    _ref1 = this.out_arrows;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      a = _ref1[_j];
      running_total += a.label;
      if (r < running_total) {
        return a;
      }
    }
  };

  Gate.prototype.reset = function() {
    return this.count = 0;
  };

  return Gate;

})();

if (typeof window === 'undefined') {
  assert = require('assert');
  tests = [
    function() {
      var a1, a2, g, p1, p2;
      p1 = new Pool(1);
      p2 = new Pool;
      g = new Gate;
      a1 = new Arrow(p1, g);
      a2 = new Arrow(g, p2);
      assert.equal(1, p1.tokens);
      assert.equal(0, p2.tokens);
      p1.push();
      assert.equal(0, p1.tokens);
      return assert.equal(1, p2.tokens);
    }, function() {
      var g, p1, p2, p3;
      p1 = new Pool(2);
      g = new Gate;
      new Arrow(p1, g);
      p2 = new Pool;
      p3 = new Pool;
      new Arrow(g, p2);
      new Arrow(g, p3);
      p1.push();
      p1.push();
      assert.equal(0, p1.tokens);
      return assert.equal(2, p2.tokens + p3.tokens);
    }, function() {
      var g, p1, p2, p3;
      p1 = new Pool(2);
      g = new Gate;
      g.mode = 'deal';
      new Arrow(p1, g);
      p2 = new Pool;
      p3 = new Pool;
      new Arrow(g, p2);
      new Arrow(g, p3);
      p1.push();
      p1.push();
      assert.equal(0, p1.tokens);
      assert.equal(1, p2.tokens);
      return assert.equal(1, p3.tokens);
    }, function() {
      var activated, p, t;
      p = new Pool;
      activated = 0;
      t = new Trigger(p, {
        activate: function() {
          return activated++;
        }
      });
      p.give(1);
      return assert.equal(activated, 1, 'activated');
    }, function() {
      var a, m, p1, p2;
      p1 = new Pool(1);
      p2 = new Pool;
      a = new Arrow(p1, p2);
      new Arrow(p2, p1);
      m = new Modifier(p2, a, 1);
      p1.push();
      assert.equal(a.label, 2);
      p2.push();
      return assert.equal(a.label, 1);
    }, function() {
      var d, p1, p2, s;
      d = new Diagram;
      p1 = d.add(new Pool(1));
      p2 = d.add(new Pool);
      d.add(new Arrow(p1, p2));
      s = d.state();
      p1.push();
      assert.equal(0, p1.tokens);
      assert.equal(1, p2.tokens);
      d.restore(s);
      assert.equal(1, p1.tokens);
      return assert.equal(0, p2.tokens);
    }
  ];
  for (_i = 0, _len = tests.length; _i < _len; _i++) {
    t = tests[_i];
    t();
  }
}
